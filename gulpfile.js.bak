import gulp from 'gulp';
import plumber from 'gulp-plumber';
import gulpIf from 'gulp-if';

import dartSass from 'sass'; import gulpSass from 'gulp-sass';

import postcss from 'gulp-postcss';
import postUrl from 'postcss-url';
import autoprefixer from 'autoprefixer';
import csso from 'postcss-csso';

import htmlmin from 'gulp-htmlmin';
import rename from 'gulp-rename';
import terser from 'gulp-terser';

import squoosh from 'gulp-libsquoosh';
import svgo from 'gulp-svgmin';
import { stacksvg } from 'gulp-stacksvg';

import { deleteAsync } from 'del';
import browser from 'browser-sync';

import bemlinter from 'gulp-html-bemlinter';
import { htmlValidator } from 'gulp-w3c-html-validator';

const sass = gulpSass(dartSass);
let isDevelopment = true;

// BrowserSync instance
const server = browser.create();

// /* ---------- HTML ---------- */
export function processMarkup() {
    return gulp.src('source/*.html')
        .pipe(gulpIf(!isDevelopment, htmlmin({
            collapseWhitespace: true,
            conservativeCollapse: true
        })))
        .pipe(gulp.dest('build'));
}

export function lintBem() {
    return gulp.src('source/*.html')
        .pipe(bemlinter());
}

export function validateMarkup() {
    return gulp.src('source/*.html')
        .pipe(htmlValidator.analyzer())
        .pipe(htmlValidator.reporter({ throwErrors: true }));
}

/* ---------- STYLES ---------- */
export function processStyles() {
    return gulp.src('source/sass/*.scss', { sourcemaps: isDevelopment })
        .pipe(plumber())
        .pipe(sass().on('error', sass.logError))
        .pipe(postcss([
            postUrl({ assetsPath: '../' }),
            autoprefixer(), gulpIf(!isDevelopment, csso())
        ]))
        .pipe(gulpIf(!isDevelopment, rename({ suffix: '.min' })))
        .pipe(gulp.dest('build/css', { sourcemaps: isDevelopment }))
        .pipe(server.stream()); }

/* ---------- SCRIPTS ---------- */
export function processScripts() {
    return gulp.src('source/js/**/*.js', { sourcemaps: isDevelopment })
        .pipe(gulpIf(!isDevelopment, terser()))
        .pipe(gulp.dest('build/js', { sourcemaps: isDevelopment }))
        .pipe(server.stream());
}

/* ---------- IMAGES ---------- */
export function optimizeImages() {
    return gulp.src('source/img/**/*.{png,jpg}')
        .pipe(gulpIf(!isDevelopment, squoosh()))
        .pipe(gulp.dest('build/img'));
}

export function createWebp() {
    return gulp.src('source/img/**/*.{png,jpg}')
        .pipe(squoosh({ webp: {} }))
        .pipe(gulp.dest('build/img'));
}

/* ---------- SVG ---------- */

export function optimizeVector() {
    return gulp.src(['source/img/**/*.svg', '!source/img/icons/**/*.svg'])
        .pipe(svgo())
        .pipe(gulp.dest('build/img'));
}

export function createStack() {
    return gulp.src('source/img/icons/**/*.svg')
        .pipe(svgo()) .pipe(stacksvg())
        .pipe(gulp.dest('build/img/icons'));
}

/* ---------- STATIC / ASSETS ---------- */
export function copyAssets() {
    return gulp.src([ 'source/fonts/**/*.{woff2,woff}', 'source/*.ico', 'source/*.webmanifest', ], { base: 'source' })
        .pipe(gulp.dest('build'));
}

/* ---------- SERVER ---------- */
export function startServer(done) {
    server.init({
        server: { baseDir: 'build' },
        cors: true,
        notify: false,
        ui: false,
    });
    done();
}

function reloadServer(done) {
    server.reload();
    done();
}

/* ---------- WATCHERS ---------- */
function watchFiles() {
    gulp.watch('source/sass/**/*.scss', gulp.series(processStyles));
    gulp.watch('source/js/**/*.js', gulp.series(processScripts));
    gulp.watch('source/*.html', gulp.series(processMarkup, reloadServer));
    gulp.watch('source/img/**/*.{png,jpg}', gulp.series(optimizeImages, reloadServer));
    gulp.watch('source/img/**/*.svg', gulp.series(optimizeVector, createStack, reloadServer));
}

/* ---------- CLEAN / BUILD CHAINS ---------- */
export function deleteBuild() {
    return deleteAsync('build');
}

function compileProject(done) {
    const tasks = [
        processMarkup,
        processStyles,
        processScripts,
        optimizeVector,
        createStack,
        copyAssets,
        optimizeImages
    ];

    if (!isDevelopment) {
        tasks.push(createWebp); // webp только в prod
    }

    gulp.parallel(...tasks)(done);
}

/* ---------- PUBLIC TASKS ---------- */
export function buildProd(done) {
    isDevelopment = false;
    gulp.series(
        deleteBuild,
        compileProject
    )(done);
}

export function runDev(done) {
    isDevelopment = true;
    gulp.series(
        deleteBuild,
        compileProject,
        startServer,
        watchFiles
    )(done);
}
